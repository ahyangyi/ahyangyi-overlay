diff --git a/Makefile b/Makefile
new file mode 100644
index 0000000..03ee57f
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,15 @@
+CC?=gcc
+CFLAGS?=-O2 -march=native
+LDFLAGS=-lm -lalleg
+
+SOURCE=$(wildcard *.c)
+OBJECTS=$(patsubst %.c,%.o,$(SOURCE))
+DEPENDENCY=$(wildcard *.h) Makefile
+
+all: white-butterfly
+
+white-butterfly: $(OBJECTS)
+	$(CC) $^ $(LDFLAGS) -o $@
+
+%.o: %.c $(DEPENDENCY)
+	$(CC) $< $(CFLAGS) -c -o $@
diff --git a/display_init.c b/display_init.c
index c6dcd8f..f654c27 100644
--- a/display_init.c
+++ b/display_init.c
@@ -627,7 +627,7 @@ void prepare_circles(void)
    }
  }
 
-
+ destroy_bitmap(temp_bitmap);
 
  for (i = 0; i < RLE_RINGS; i ++)
  {
@@ -665,10 +665,6 @@ void prepare_circles(void)
   }
   destroy_bitmap(temp_bitmap);
  }
-
-  destroy_bitmap(temp_bitmap);
-  // temp_bitmap is not created each time through loop for icircles.
-
 }
 
 
diff --git a/input.c b/input.c
index 956830f..4385ac9 100644
--- a/input.c
+++ b/input.c
@@ -3,6 +3,7 @@
 
 #include "allegro.h"
 
+#include <stdio.h>
 #include <math.h>
 
 #include "globvars.h"
@@ -86,7 +87,11 @@ static int sshot_counter = 0;
    blit(screen, scrshot_bmp, 100,0,0,0,600,600);
 
   strcpy(sfile, "sshot");
-  strcat(sfile, itoa(scrs, istr, 10));
+  {
+    char buf[20];
+    sprintf(buf, "%d", scrs);
+    strcat(sfile, buf);
+  }
   strcat(sfile, ".bmp");
   save_bitmap(sfile, scrshot_bmp, palet);
   rectfill(screen, 100, 0, 700, 0, COL_WHITE);
@@ -2259,7 +2264,7 @@ void jstick_calibrate(void)
 
       msg = calibrate_joystick_name(0);
 
-      textprintf_centre_ex(screen, font, 320, 170, -1, -1, msg);
+      textprintf_centre_ex(screen, font, 320, 170, -1, -1, "%s", msg);
       textprintf_centre_ex(screen, font, 320, 200, -1, -1, "AND PRESS SPACE");
 
       do
diff --git a/main.c b/main.c
index 85dfebf..2129ae2 100644
--- a/main.c
+++ b/main.c
@@ -11,6 +11,7 @@ I keep forgetting this and doing it by accident.
 #include "allegro.h"
 
 #include <string.h>
+#include <stdio.h>
 #include <math.h>
 
 #include "globvars.h"
@@ -141,16 +142,17 @@ I haven't tested it).
 
    {
 
-//     char *HPath = getenv("HOME");
+     char *HPath = getenv("HOME");
 
 // use this if for some reason you're running Windows Vista:
-        char *HPath = getenv("APPDATA");
+//        char *HPath = getenv("APPDATA");
 
 	 char ConfigPath[2048];
 
-	 sprintf(ConfigPath, "%s/.Whitebutterfly", HPath);
-	 set_config_file(ConfigPath);
-
+	 if (snprintf(ConfigPath, 2048, "%s/.Whitebutterfly", HPath) < 2048)
+     {
+	   set_config_file(ConfigPath);
+     }
    }
 #else
    set_config_file("init.txt");
diff --git a/menu.c b/menu.c
index a076fab..2997b5e 100644
--- a/menu.c
+++ b/menu.c
@@ -770,7 +770,7 @@ void key_box(const char ktext [], int command)
  rectfill(display, 200, 240, 400, 290, COL_OUTLINE);
  rect(display, 201, 241, 399, 289, COL_COL1);
 
- textprintf_centre_ex(display, font, 300, 257, -1, -1, ktext);
+ textprintf_centre_ex(display, font, 300, 257, -1, -1, "%s", ktext);
 
  vsync();
  blit(display, screen, 0, 0, 100, 0, 600, 600);
@@ -1432,7 +1432,7 @@ char ftext [8] [9] [150] =
  rect(display, TITLE_X - 80, TITLE_Y - 0, TITLE_X + 80, TITLE_Y + 30, TRANS_BLUE3);
  rect(display, TITLE_X - 81, TITLE_Y - 1, TITLE_X + 81, TITLE_Y + 31, TRANS_BLUE2);
 
- textprintf_centre_ex(display, font, TITLE_X, TITLE_Y + 10, -1, -1, ftext [ship_chosen] [0]);
+ textprintf_centre_ex(display, font, TITLE_X, TITLE_Y + 10, -1, -1, "%s", ftext [ship_chosen] [0]);
 
 
  if (ship_chosen == 4 && options.unlock [arena.difficulty] == 0)
@@ -1446,18 +1446,18 @@ char ftext [8] [9] [150] =
  hline(display, 198, LINE1_Y + 30, 320, TRANS_BLUE3);
  textprintf_ex(display, font, TEXT_X - 5, LINE1_Y + 20, -1, -1, "weapons");
 
- textprintf_ex(display, font, TEXT_X, LINE1_Y + 40, -1, -1, ftext [ship_chosen] [1]);
- textprintf_ex(display, font, TEXT_X, LINE1_Y + 55, -1, -1, ftext [ship_chosen] [2]);
- textprintf_ex(display, font, TEXT_X, LINE1_Y + 70, -1, -1, ftext [ship_chosen] [3]);
+ textprintf_ex(display, font, TEXT_X, LINE1_Y + 40, -1, -1, "%s", ftext [ship_chosen] [1]);
+ textprintf_ex(display, font, TEXT_X, LINE1_Y + 55, -1, -1, "%s", ftext [ship_chosen] [2]);
+ textprintf_ex(display, font, TEXT_X, LINE1_Y + 70, -1, -1, "%s", ftext [ship_chosen] [3]);
 // textprintf_ex(display, font, TEXT_X, LINE1_Y + 60, -1, -1, ftext [ship_chosen] [4]);
 
  hline(display, 198, LINE1_Y + 110, 320, TRANS_BLUE3);
  textprintf_ex(display, font, TEXT_X - 5, LINE1_Y + 100, -1, -1, "controls");
 
- textprintf_ex(display, font, TEXT_X, LINE1_Y + 120, -1, -1, ftext [ship_chosen] [4]);
- textprintf_ex(display, font, TEXT_X, LINE1_Y + 135, -1, -1, ftext [ship_chosen] [5]);
- textprintf_ex(display, font, TEXT_X, LINE1_Y + 150, -1, -1, ftext [ship_chosen] [6]);
- textprintf_ex(display, font, TEXT_X, LINE1_Y + 165, -1, -1, ftext [ship_chosen] [7]);
+ textprintf_ex(display, font, TEXT_X, LINE1_Y + 120, -1, -1, "%s", ftext [ship_chosen] [4]);
+ textprintf_ex(display, font, TEXT_X, LINE1_Y + 135, -1, -1, "%s", ftext [ship_chosen] [5]);
+ textprintf_ex(display, font, TEXT_X, LINE1_Y + 150, -1, -1, "%s", ftext [ship_chosen] [6]);
+ textprintf_ex(display, font, TEXT_X, LINE1_Y + 165, -1, -1, "%s", ftext [ship_chosen] [7]);
   }
 
  END_TRANS
diff --git a/sound.c b/sound.c
index be6c43e..3403c3d 100644
--- a/sound.c
+++ b/sound.c
@@ -1896,7 +1896,7 @@ void init_sound(void)
    }
 
    reserve_voices(16, 0); // not sure this is necessary
-   if (install_sound (DIGI_AUTODETECT, MIDI_AUTODETECT, NULL) == -1)
+   if (install_sound (DIGI_AUTODETECT, MIDI_NONE, NULL) == -1)
    {
     exit(1); // don't bother with proper error handling yet. This should just disable sound.
    }
diff --git a/stuff.c b/stuff.c
index 372fd7e..39eb585 100644
--- a/stuff.c
+++ b/stuff.c
@@ -18,6 +18,7 @@ grand(n) - random number from 1 to n
 #include "config.h"
 
 #include "allegro.h"
+#include "stuff.h"
 
 #include <math.h>
 
@@ -35,8 +36,6 @@ float decoy_table [ANGLE_1]; // not used
 float cos_table [ANGLE_1];
 float sin_table [ANGLE_1];
 
-inline int xpart(int angle, int length);
-
 void init_trig(void)
 {
  int i;
@@ -50,16 +49,6 @@ void init_trig(void)
 
 }
 
-inline int xpart(int angle, int length)
-{
- return (cos_table [angle & 1023] * length);
-}
-
-inline int ypart(int angle, int length)
-{
- return (sin_table [angle & 1023] * length);
-}
-
 float lcos(int angle)
 {
  return cos_table [angle & 1023];
@@ -179,7 +168,7 @@ int pulsate(int speed, int amount, int county)
 void error_message_out(const char *errm)
 {
       set_gfx_mode(GFX_TEXT, 0, 0, 0, 0);
-      allegro_message(errm);
+      allegro_message("%s", errm);
       exit(1);
 }
 
diff --git a/stuff.h b/stuff.h
index 5bc434c..7c3102d 100644
--- a/stuff.h
+++ b/stuff.h
@@ -1,3 +1,4 @@
+#pragma once
 void init_trig(void);
 
 float angle_to_radians(int angle);
@@ -7,8 +8,7 @@ int grand(int number);
 int crandom(int number);
 int turn_towards_angle(int angle, int tangle, int turning);
 int turn_towards_xy(int x1, int y1, int x2, int y2, int angle, int turning);
-inline int xpart(int angle, int length);
-inline int ypart(int angle, int length);
+
 int pulsate(int speed, int amount, int county);
 int angle_difference(int a1, int a2);
 
@@ -18,3 +18,16 @@ int delta_turn_towards_xy(int x1, int y1, int x2, int y2, int angle, int turning
 int pos_or_neg(int a);
 int odd_even(int v);
 char coin(void);
+
+extern float cos_table [ANGLE_1];
+extern float sin_table [ANGLE_1];
+
+inline static int xpart(int angle, int length)
+{
+ return (cos_table [angle & 1023] * length);
+}
+
+inline static int ypart(int angle, int length)
+{
+ return (sin_table [angle & 1023] * length);
+}
